import Head from "next/head";
import Header from "../components/Header";
import { useContext, useMemo, useState } from "react";
import cardList from "../constants/card";
import classnames from "classnames";
import { CardContext, isClient } from "../utils";
import Card from "../components/Card";

let AnimateOnChange: any = () => <></>;
let easings: any = {};

if (isClient) {
  AnimateOnChange = require("react-animation").AnimateOnChange;
  easings = require("react-animation").easings;
}

export default function Home() {
  const [eye, setEye] = useState(false);
  const { current } = useContext(CardContext);

  const cover = useMemo(
    () => (
      <>
        <div
          suppressHydrationWarning={true}
          style={{
            backgroundImage: `url(${current.cover.src})`,
            backgroundSize: "cover",
            backgroundPosition: "center",
            filter: eye ? undefined : "blur(8px) brightness(50%)",
          }}
          className="fixed -inset-[4px] z-[0] transition"
        />
        {isClient ? (
          <AnimateOnChange
            durationIn="200ms"
            durationOut="200ms"
            easingsIn="easeInQuad"
            easingsOut="easeInQuad"
            animationIn="fadeIn"
            animationOut="fadeOut"
            className={classnames(
              eye ? "!opacity-0" : "",
              "transition-opacity"
            )}
          >
            <div
              suppressHydrationWarning={true}
              style={{
                backgroundImage: `url(${current.cover.src})`,
                backgroundSize: "cover",
                backgroundPosition: "center",
                filter: "blur(2px) brightness(70%)",
              }}
              className="fixed -inset-[4px] z-[1] transition"
            ></div>
          </AnimateOnChange>
        ) : (
          <div
            suppressHydrationWarning={true}
            style={{
              backgroundImage: `url(${current.cover.src})`,
              backgroundSize: "cover",
              backgroundPosition: "center",
              filter: "blur(2px) brightness(70%)",
            }}
            className="fixed -inset-[4px] z-[1] transition"
          />
        )}
      </>
    ),
    [current.cover.src, eye]
  );

  return (
    <>
      <Head>
        <title>Dahanu Rd.</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div
        className={classnames(
          eye ? "opacity-0" : "opacity-100",
          "transition-opacity"
        )}
      >
        <Header />
      </div>
      <main className="overflow-hidden h-[calc(100vh-112px)]">
        {cover}
        <button
          type="button"
          onMouseEnter={() => setEye(true)}
          onMouseLeave={() => setEye(false)}
          className={classnames(
            { "opacity-20": eye },
            "transition-opacity px-3 py-1 text-xs rounded-full bg-white/20 fixed left-5 bottom-5 z-40"
          )}
        >
          👁️
        </button>
        <div
          className={classnames(
            eye ? "opacity-0" : "opacity-100",
            "transition-opacity h-full pb-20 flex items-center space-x-14 relative z-[1] px-[42px]"
          )}
        >
          <div className=""></div>
          <div className="max-w-[42vw] pr-20">
            <h1
              className="text-white font-lexend text-[96px] leading-[120px]"
              style={{
                textShadow: "0px 4px 4px rgba(0, 0, 0, 0.25)",
              }}
              suppressHydrationWarning={true}
            >
              {isClient ? (
                <AnimateOnChange
                  animationIn="fadeIn"
                  animationOut="fadeOut"
                  durationIn="200ms"
                  durationOut="200ms"
                  suppressHydrationWarning={true}
                  easingsIn="easeInQuad"
                  easingsOut="easeInQuad"
                >
                  {current.title ?? ""}
                </AnimateOnChange>
              ) : (
                <span>{current.title ?? ""}</span>
              )}
            </h1>
            <p
              className="text-white/90 text-base leading-[26px] font-montserrat"
              style={{
                textShadow: "0px 4px 4px rgba(0, 0, 0, 0.25)",
              }}
              suppressHydrationWarning={true}
            >
              {isClient ? (
                <AnimateOnChange
                  animationIn="fadeIn"
                  animationOut="fadeOut"
                  durationIn="200ms"
                  durationOut="200ms"
                  easingsIn="easeInQuad"
                  easingsOut="easeInQuad"
                >
                  {current.description}
                </AnimateOnChange>
              ) : (
                <span>{current.description}</span>
              )}
            </p>
          </div>
          <div className="flex space-x-[50px] items-center ">
            {cardList.map((e) => (
              <Card key={e.id} item={e} current={current.id} />
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
